import { RemoteInfo, Socket, createSocket } from "dgram";

const buf2 = [251,70,129,128,0,1,0,6,0,0,0,0,3,119,119,119,7,110,101,116,102,108,105,120,3,99,111,109,0,0,1,0,1,3,119,119,119,7,110,101,116,102,108,105,120,3,99,111,109,0,0,5,0,1,0,0,0,30,0,13,3,119,119,119,6,100,114,97,100,105,115,239,191,189,16,3,119,119,119,6,100,114,97,100,105,115,7,110,101,116,102,108,105,120,3,99,111,109,0,0,5,0,1,0,0,0,30,0,25,3,119,119,119,9,101,117,45,119,101,115,116,45,49,8,105,110,116,101,114,110,97,108,239,191,189,49,3,119,119,119,9,101,117,45,119,101,115,116,45,49,8,105,110,116,101,114,110,97,108,6,100,114,97,100,105,115,7,110,101,116,102,108,105,120,3,99,111,109,0,0,5,0,1,0,0,0,30,0,71,44,97,112,105,112,114,111,120,121,45,119,101,98,115,105,116,101,45,110,108,98,45,112,114,111,100,45,50,45,98,52,100,101,54,50,98,53,49,54,97,100,102,98,98,102,3,101,108,98,9,101,117,45,119,101,115,116,45,49,9,97,109,97,122,111,110,97,119,115,239,191,189,24,44,97,112,105,112,114,111,120,121,45,119,101,98,115,105,116,101,45,110,108,98,45,112,114,111,100,45,50,45,98,52,100,101,54,50,98,53,49,54,97,100,102,98,98,102,3,101,108,98,9,101,117,45,119,101,115,116,45,49,9,97,109,97,122,111,110,97,119,115,3,99,111,109,0,0,1,0,1,0,0,0,30,0,4,54,73,239,191,189,110,44,97,112,105,112,114,111,120,121,45,119,101,98,115,105,116,101,45,110,108,98,45,112,114,111,100,45,50,45,98,52,100,101,54,50,98,53,49,54,97,100,102,98,98,102,3,101,108,98,9,101,117,45,119,101,115,116,45,49,9,97,109,97,122,111,110,97,119,115,3,99,111,109,0,0,1,0,1,0,0,0,30,0,4,18,239,191,189,8,239,191,189,44,97,112,105,112,114,111,120,121,45,119,101,98,115,105,116,101,45,110,108,98,45,112,114,111,100,45,50,45,98,52,100,101,54,50,98,53,49,54,97,100,102,98,98,102,3,101,108,98,9,101,117,45,119,101,115,116,45,49,9,97,109,97,122,111,110,97,119,115,3,99,111,109,0,0,1];

export class TestSocket {
    socket: Socket;
    static PORT = 5300;

    constructor() {
        this.socket = createSocket('udp4');
        
        this.socket.on('error', (err: any) => {throw(err);})
    }
    
    listen(port: any = TestSocket.PORT, host: any = '0.0.0.0') {
        this.socket.bind(port, host, () => {
            console.log('test server bound on UDP port ', TestSocket.PORT);
            this.socket.setBroadcast(true);
        });
        
        this.socket.on('message', async (requestMessage: Buffer, requestInfo: RemoteInfo) => {
            console.log('message received');
        });
    }

    send() {
        this.socket.send(Buffer.from(buf2), TestSocket.PORT, '255.255.255.255', (err: any) => {
            if (err) {
                console.error(`Error sending response: ${err.message}`);
                this.socket.close();
            }
            else {
                console.log(`test packet sent`);
            }
        });
    }
}